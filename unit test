using Xunit;

public class ShapeTests
{
    [Fact]
    public void CircleAreaCalculation()
    {
        var circle = new Circle(5);
        Assert.Equal(78.53981633974483, circle.CalculateArea(), 5);
    }

    [Fact]
    public void TriangleAreaCalculation()
    {
        var triangle = new Triangle(3, 4, 5);
        Assert.Equal(6, triangle.CalculateArea());
    }

    [Fact]
    public void RightAngledTriangleCheck()
    {
        var triangle = new Triangle(3, 4, 5);
        Assert.True(triangle.IsRightAngled());
    }

    [Fact]
    public void NotRightAngledTriangleCheck()
    {
        var triangle = new Triangle(3, 4, 6);
        Assert.False(triangle.IsRightAngled());
    }

    [Fact]
    public void ShapeCalculatorWorks()
    {
        IShape circle = new Circle(1);
        IShape triangle = new Triangle(3, 4, 5);
        
        Assert.Equal(Math.PI, ShapeCalculator.CalculateArea(circle));
        Assert.Equal(6, ShapeCalculator.CalculateArea(triangle));
    }

    [Fact]
    public void InvalidCircleThrows()
    {
        Assert.Throws<ArgumentException>(() => new Circle(-1));
    }

    [Fact]
    public void InvalidTriangleThrows()
    {
        Assert.Throws<ArgumentException>(() => new Triangle(1, 1, 3));
    }
}
